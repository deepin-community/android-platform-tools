Description: Revert "Order events returned by fdevent_epoll"
 This revert can avoid ftbfs, shows below:
 In file included from packages/modules/adb/fdevent/fdevent_epoll.cpp:17:
 In file included from packages/modules/adb/fdevent/fdevent_epoll.h:21:
 In file included from packages/modules/adb/sysdeps.h:30:
 In file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/string:54:
 In file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:39:
 In file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ext/alloc_traits.h:34:
 /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/alloc_traits.h:539:4: error: no matching function for call to 'construct_at'
           std::construct_at(__p, std::forward<_Args>(__args)...);
           ^~~~~~~~~~~~~~~~~
 /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/vector.tcc:117:21: note: in instantiation of function template specialization 'std::allocator_traits<std::allocator<fdevent_event>>::construct<fdevent_event, fdevent *, unsigned int &>' requested here
             _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
                            ^
 packages/modules/adb/fdevent/fdevent_epoll.cpp:180:36: note: in instantiation of function template specialization 'std::vector<fdevent_event>::emplace_back<fdevent *, unsigned int &>' requested here
                         fde_events.emplace_back(&fde, events);
                                    ^
 /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_construct.h:94:5: note: candidate template ignored: substitution failure [with _Tp = fdevent_event, _Args = <fdevent *, unsigned int &>]: no matching constructor for initialization of 'fdevent_event'
     construct_at(_Tp* __location, _Args&&... __args)
     ^
 .
 This reverts commit 78d34d8f714f9c78b6b628417cfb690d8fba3900.
Forwarded: not-needed
--- a/packages/modules/adb/fdevent/fdevent.h
+++ b/packages/modules/adb/fdevent/fdevent.h
@@ -24,10 +24,10 @@
 #include <chrono>
 #include <deque>
 #include <functional>
-#include <map>
 #include <mutex>
 #include <optional>
 #include <set>
+#include <unordered_map>
 #include <variant>
 
 #include <android-base/thread_annotations.h>
@@ -126,7 +126,7 @@ struct fdevent_context {
     std::optional<uint64_t> looper_thread_id_ = std::nullopt;
     std::atomic<bool> terminate_loop_ = false;
 
-    std::map<int, fdevent> installed_fdevents_;
+    std::unordered_map<int, fdevent> installed_fdevents_;
 
   private:
     uint64_t fdevent_id_ = 0;
--- a/packages/modules/adb/fdevent/fdevent_epoll.cpp
+++ b/packages/modules/adb/fdevent/fdevent_epoll.cpp
@@ -108,18 +108,14 @@ void fdevent_context_epoll::Loop() {
     looper_thread_id_ = android::base::GetThreadId();
 
     std::vector<fdevent_event> fde_events;
-    std::unordered_map<fdevent*, fdevent_event*> event_map;
     std::vector<epoll_event> epoll_events;
+    epoll_events.resize(this->installed_fdevents_.size());
 
     while (true) {
         if (terminate_loop_) {
             break;
         }
 
-        if (epoll_events.size() < this->installed_fdevents_.size()) {
-            epoll_events.resize(this->installed_fdevents_.size());
-        }
-
         int rc = -1;
         while (rc == -1) {
             std::optional<std::chrono::milliseconds> timeout = CalculatePollDuration();
@@ -137,10 +133,7 @@ void fdevent_context_epoll::Loop() {
         }
 
         auto post_poll = std::chrono::steady_clock::now();
-        fde_events.reserve(installed_fdevents_.size());
-        fde_events.clear();
-        event_map.clear();
-
+        std::unordered_map<fdevent*, unsigned> event_map;
         for (int i = 0; i < rc; ++i) {
             fdevent* fde = static_cast<fdevent*>(epoll_events[i].data.ptr);
 
@@ -159,16 +152,13 @@ void fdevent_context_epoll::Loop() {
                 events |= FDE_READ | FDE_ERROR;
             }
 
-            LOG(DEBUG) << dump_fde(fde) << " got events " << std::hex << std::showbase << events;
-            auto& fde_event = fde_events.emplace_back(fde, events);
-            event_map[fde] = &fde_event;
-            fde->last_active = post_poll;
+            event_map[fde] = events;
         }
 
         for (auto& [fd, fde] : installed_fdevents_) {
             unsigned events = 0;
             if (auto it = event_map.find(&fde); it != event_map.end()) {
-                events = it->second->events;
+                events = it->second;
             }
 
             if (events == 0) {
@@ -176,12 +166,16 @@ void fdevent_context_epoll::Loop() {
                     auto deadline = fde.last_active + *fde.timeout;
                     if (deadline < post_poll) {
                         events |= FDE_TIMEOUT;
-                        LOG(DEBUG) << dump_fde(&fde) << " timed out";
-                        fde_events.emplace_back(&fde, events);
-                        fde.last_active = post_poll;
                     }
                 }
             }
+
+            if (events != 0) {
+                LOG(DEBUG) << dump_fde(&fde) << " got events " << std::hex << std::showbase
+                           << events;
+                fde_events.push_back({&fde, events});
+                fde.last_active = post_poll;
+            }
         }
         this->HandleEvents(fde_events);
         fde_events.clear();
